/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.imobble.recorder;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import android.media.MediaRecorder;
import android.media.MediaPlayer;
import java.io.IOException;
import android.os.Environment;
import java.io.FileOutputStream;
import java.io.File;
import android.net.Uri;

@Kroll.module(name="Recorder", id="com.imobble.recorder")
public class RecorderModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "RecorderModule";
	private static final boolean DBG = TiConfig.LOGD;

	private static String mFileName = null;
	private MediaRecorder mRecorder = null;
	private MediaPlayer mPlayer = null;
	private String approot = null;
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public RecorderModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		// File file = new File(app.getCurrentActivity().getApplicationContext().getExternalFilesDir(Environment.DIRECTORY_MUSIC), "audiorecordtest.3gp");
		// = file.getAbsolutePath();
	}

	@Kroll.method
	public void startRecord() {
		if (approot==null) approot = "/sdcard";
		File mFile = new File(approot, "audio.3gp");
		  
		if(mFile.delete())
			mFile = new File(approot, "audio.3gp");
		Uri mUri = Uri.fromFile(mFile);
		mFileName = mUri.getPath();
		Log.d(LCAT, "going to save file at "+mFileName);

		Log.d(LCAT, "start recording");
		mRecorder = new MediaRecorder();
		mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
		mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
		mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
		mRecorder.setOutputFile(mFileName);

		try {
			mRecorder.prepare();
		} catch (IOException e) {
			Log.e(LCAT, "recorder prepare() failed");
		}

		mRecorder.start();
	}

	@Kroll.method
	public void stopRecord() {
		Log.d(LCAT, "stop recording");

		mRecorder.stop();
		mRecorder.release();
		mRecorder = null;
	}

	@Kroll.method
	public void startPlay() {
		Log.d(LCAT, "start play recording");
		mPlayer = new MediaPlayer();
		try {
			mPlayer.setDataSource(mFileName);
			mPlayer.prepare();
			mPlayer.start();
		} catch (IOException e) {
			Log.e(LCAT, "player prepare() failed");
		}
	}

	@Kroll.method
	public void stopPlay() {
		Log.d(LCAT, "stop play recording");
		mPlayer.release();
		mPlayer = null;
	}

	@Kroll.setProperty @Kroll.method
	public void setApproot(String ar) {
		Log.d(LCAT, "Setting approot: "+ar);
		approot = ar;
	} 

	@Kroll.getProperty @Kroll.method
	public String getApproot() {
		return approot;
	}
}
